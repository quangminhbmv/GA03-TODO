<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <title>
    <%= title %>
  </title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
  <script>
    let todos;
    function addTodo() {
      const title = document.getElementById('title').value;
      fetch(`/api/todos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          title,
        })
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          loadTodos();
        })
        .catch(error => {
          console.error('Fetch error:', error);
        });
      document.getElementById('title').value = '';
      return false;
    }

    function deleteTodo(id) {
      fetch(`/api/todos/${id}`, {
        method: 'DELETE'
      })
        .then(res => {
          if (!res.ok) throw new Error('Delete failed');
          return res.json();
        })
        .then(data => {
          console.log('Deleted:', data);
          loadTodos();
        })
        .catch(err => console.error('Fetch error:', err));
      return false;
    }

    function toogleTodo(id) {
      const todo = todos.find(t => t.id === id);
      const completed = !todo.completed;
      fetch(`/api/todos/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          completed,
        })
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          loadTodos();
        })
        .catch(error => {
          console.error('Fetch error:', error);
        });
      return false;
    }

    function renderTodoList(todos) {
      let html = '<ul class="mb-8">';
      for (let i = 0; i < todos.length; i++) {
        const t = todos[i];
        html += '<li class="mb-2 flex items-center space-x-4';
        if (t.completed) {
          html += ' line-through text-gray-400';
        }
        html += '">';

        // ti√™u ƒë·ªÅ
        html += '<span class="flex-1">';
        html += t.title;
        html += '</span>';

        // üîΩ th√™m n√∫t x√≥a
        html += '<button onclick="return deleteTodo(' + t.id + ')" ';
        html += 'class="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none">';
        html += '‚àí'; // d·∫•u tr·ª´
        html += '</button>';

        // n√∫t toggle
        html += '<form class="inline"><button type="submit" class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none" onclick="return toogleTodo(';
        html += t.id;
        html += ')">';
        if (t.completed) {
          html += 'Mark as not done';
        } else {
          html += 'Mark as done';
        }
        html += '</button></form>';
      }
      html += '</ul>';
      document.getElementById('todos').innerHTML = html;
    }

    function loadTodos() {
      fetch('/api/todos')
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          todos = data;
          console.log('Data received:', data);
          renderTodoList(data);
        })
        .catch(error => {
          console.error('Fetch error:', error);
        }); 
    }
    loadTodos();
  </script>
</head>

<body class="bg-gray-50 font-sans p-6">
  <h1 class="text-3xl font-bold mb-6">
    <%= title %>
  </h1>
  <div id="todos"></div>
  <form method="POST" class="max-w-md">
    <label for="title" class="block mb-2 font-medium text-gray-700">Title</label>
    <input name="title" id="title" type="text"
      class="w-full p-2 border border-gray-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-400" />
    <button onclick="return addTodo();" type="submit" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 focus:outline-none">
      Add new TODO
    </button>
  </form>
  <a href="/" class="block mt-6 text-blue-600 hover:underline">Back Home</a>
</body>

</html>